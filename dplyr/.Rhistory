library(psych)
library(magrittr)
library(knitr)
unlink("Library/Mobile Documents/com~apple~CloudDocs/IIT/CS422/homeworks/Homework 1/pan-li-hw1_cache", recursive = TRUE)
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
### Question ii
```{r}
```{r}
df <- df %>% select(where(~!any(is.na(.))))
library(dplyr)
library(psych)
library(magrittr)
library(knitr)
df <- df %>% select(where(~!any(is.na(.))))
# You will notice that the last column of the dataset has many “N/A” values (Not Applicable). Drop this column so that the data.df dataframe now contains only eight columns, or attributes. The remaining analysis will be done on the dataframe with eight columns.
df <- df %>% select(where(~!any(is.na(.))))
# You will notice that the last column of the dataset has many “N/A” values (Not Applicable). Drop this column so that the data.df dataframe now contains only eight columns, or attributes. The remaining analysis will be done on the dataframe with eight columns.
df <- df %>% select(where(~!any(is.na(.))))
# Read the dataset into a R dataframe; call the dataframe ‘data.df’. Pay attention to the first seven lines of the dataset. These contain comments as indicated by the ‘#’ character in dataset file. When reading the dataset, ignore the lines that contain comments. (See the manual page for read.csv() and find out the parameter that will allow you to ignore comments.)
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
# Read the dataset into a R dataframe; call the dataframe ‘data.df’. Pay attention to the first seven lines of the dataset. These contain comments as indicated by the ‘#’ character in dataset file. When reading the dataset, ignore the lines that contain comments. (See the manual page for read.csv() and find out the parameter that will allow you to ignore comments.)
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
# Sort the dataframe:
## (a) Sort the dataframe by descending order of total cases, then print the top six entries.
df <- df %>% arrange(desc(total_cases))
print(top_n(df, 6))
## (b) Sort the dataframe by descending order of total cases, then print the bottom six entries.
print(top_n(df, -6))
### You will notice that the last column of the dataset has many “N/A” values (Not Applicable). Drop this column so that the data.df dataframe now contains only eight columns, or attributes. The remaining analysis will be done on the dataframe with eight columns.
df <- df %>% select(where(~!any(is.na(.))))
### You will notice that the last column of the dataset has many “N/A” values (Not Applicable). Drop this column so that the data.df dataframe now contains only eight columns, or attributes. The remaining analysis will be done on the dataframe with eight columns.
df <- df %>% select(where(~!any(is.na(.))))
### You will notice that the last column of the dataset has many “N/A” values (Not Applicable). Drop this column so that the data.df dataframe now contains only eight columns, or attributes. The remaining analysis will be done on the dataframe with eight columns.
df <- df %>% select(where(~!any(is.na(.))))
### You will notice that the last column of the dataset has many “N/A” values (Not Applicable). Drop this column so that the data.df dataframe now contains only eight columns, or attributes. The remaining analysis will be done on the dataframe with eight columns.
df <- df %>% select(where(~!any(is.na(.))))
# Read the dataset into a R dataframe; call the dataframe ‘data.df’. Pay attention to the first seven lines of the dataset. These contain comments as indicated by the ‘#’ character in dataset file. When reading the dataset, ignore the lines that contain comments. (See the manual page for read.csv() and find out the parameter that will allow you to ignore comments.)
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
# Sort the dataframe:
## (a) Sort the dataframe by descending order of total cases, then print the top six entries.
df <- df %>% arrange(desc(total_cases))
print(top_n(df, 6))
## (b) Sort the dataframe by descending order of total cases, then print the bottom six entries.
print(top_n(df, -6))
# Sort the dataframe:
## (a) Sort the dataframe by descending order of total cases, then print the top six entries.
df <- df %>% arrange(desc(total_cases))
print(top_n(df, 6))
## (b) Sort the dataframe by descending order of total cases, then print the bottom six entries.
print(top_n(df, -6))
# Read the dataset into a R dataframe; call the dataframe ‘data.df’. Pay attention to the first seven lines of the dataset. These contain comments as indicated by the ‘#’ character in dataset file. When reading the dataset, ignore the lines that contain comments. (See the manual page for read.csv() and find out the parameter that will allow you to ignore comments.)
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
# Read the dataset into a R dataframe; call the dataframe ‘data.df’. Pay attention to the first seven lines of the dataset. These contain comments as indicated by the ‘#’ character in dataset file. When reading the dataset, ignore the lines that contain comments. (See the manual page for read.csv() and find out the parameter that will allow you to ignore comments.)
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
detach("package:dplyr", unload = TRUE)
remove.packages("dplyr")
install.packages("dplyr")
df <- df %>% select(where(~!any(is.na(.))))
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
gc()
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
df <- df %>% select(where(~!any(is.na(.))))
library(dplyr)
df <- df %>% select(where(~!any(is.na(.))))
q <- c("Hockey", "Football", "Baseball", "Curling", "Rugby", + "Lacrosse", "Basketball", "Tennis", "Cricket", "Soccer")
q <- c("Hockey", "Football", "Baseball", "Curling", "Rugby", "Lacrosse", "Basketball", "Tennis", "Cricket", "Soccer")
q
q2 <-c(q, "Hockey", "Lacrosse", "Hockey", "Water Polo", + "Hockey", "Lacrosse")
q <- c("Hockey", "Football", "Baseball", "Curling", "Rugby", "Lacrosse", "Basketball", "Tennis", "Cricket", "Soccer")
q
q2 <-c(q, "Hockey", "Lacrosse", "Hockey", "Water Polo", "Hockey", "Lacrosse")
q2
q2Factor <-as.factor(q2)
q2Factor
as.numeric(q2Factor)
as.numeric(q)
q2Factor
library(ISLR)
set.seed(1122)
index <- sample(1:nrow(Auto), 0.95*dim(Auto)[1])
train.df <- Auto[index,]
test.df <- Auto[-index, ]
View(df)
train.df <- lm(mpg~ . - name, data = train.df)
Auto
train.fit <- lm(mpg~ . - name, data = train.df)
train.fit <- lm(mpg~ . - name, data = train.df)
train.fit1 <- lm(mpg~ . - name, data = train.df)
fit.dt <- lm(mpg~ . - name, data = train.df)
set.seed(1122)
index <- sample(1:nrow(Auto), 0.95*dim(Auto)[1])
train.df <- Auto[index,]
test.df <- Auto[-index, ]
fit.df <- lm(mpg~ . - name, data = train.df)
summart(fit.df)
summary(fit.df)
fit.df.R-
fit.df.R
fit.df
summary(fit.df)
RSQUARE(fit.df)
summary(fit.df)
summary(fit.df).$r.squared
summary(fit.df)$r.squared
print('R-sq value is' + summary(fit.df)$r.squared)
summary(fit.df)$r.squared
clear
clean
print('1111'summary(fit.df)$r.squared)
print('1111', summary(fit.df)$r.squared)
R-sq <- summary(fit.df)$r.squared
rsq <- summary(fit.df)$r.squared
rsq
rsq <- round(summary(fit.df)$r.squared, 2)
rsq
print(paste('asdad', rsq))
print(paste('R-sq value is', rsq))
summart(fit.df)$r
summary(fit.df)$r
adjustrsq <- round(summary(fit.df)$adj.r.squared., 2)
adjustrsq <- round(summary(fit.df)$adj.r.squared, 2)
print(paste('R-sq value is', rsq))
print(paste('Adjusted R-sq value is', adjustrsq))
rse <- sqrt(deviance(fit.df)/df.residual(fit.df))
rse
rse <- round(sqrt(deviance(fit.df)/df.residual(fit.df)), 2)
rse
rmse <- sqrt(mean(fit.df$residuals^2))
rmse
fit.df.residuals
fit.df$residuals
plot(fit.df$residuals)
plot(fit.df$residuals, type = h)
plot(fit.df$residuals, type = 'h')
plot(fit.df$residuals, 1)
plot(fit.df$residuals)
plot(fit.df)
plot(fit.df, 1)
plot(fit.df$residuals, type = 'h')
plot(fit.df, 1)
plot(fit.df, type = 'h')
plot(fit.df, 1)
plot(fit.df$residuals, type = 'h')
histogram(fit.df$residuals)
plot(fit.df$residuals, type='hist')
plot(fit.df$residuals, type='h')
hist(fit.df$residuals[,1], plot=T, prob=T, main="Histogram of residuals",xlab="Residuals")
hist(fit.df$residuals, plot=T, prob=T, main="Histogram of residuals",xlab="Residuals")
plot(fit.df, 1)
hist(fit.df$residuals, plot=T, prob=T, main="Histogram of residuals",xlab="Residuals")
hist(fit.df$residuals, main="Histogram of residuals",xlab="Residuals")
plot(fit.df, 1)
indx <- which(fit.df$mpg)
indx <- which.max(fit.df$mpg)
View(train.df)
indx
indx <- which.max(fit.df$mpg)
indx
fit.df <- lm(mpg~ . - name, data = train.df)
fit.df
summary(fit.df)
indx <- which.max(fit.df$mpg)
df[indx, ]
df[indx,]
which.max(train.df$mpg)
indx <- which.max(train.df$mpg)
df[indx,]
fid.df
fit.df
fit.df$model$mpg
which.max(fit.df$model$mpg)
anova(fit.df)
fit.df2 <- lm(mpg~ year+displacement+weight, data = train.df)
fit.d
fit.df2
summary(fit.df2)
summary(fit.df2)
rsq2 <- round(summary(fit.df2)$r.squared, 2)
adjustrsq2 <- round(summary(fit.df2)$adj.r.squared, 2)
rse2 <- round(sqrt(deviance(fit.df2)/df.residual(fit.df2)), 2)
rmse2 <- round(sqrt(mean(fit.df2$residuals^2)), 2)
print(paste('R-sq value is', rsq2))
print(paste('Adjusted R-sq value is', adjustrsq2))
print(paste('RSE is', rse2))
print(paste('RMSE is', rmse2))
plot(fit.df2, 1)
hist(fit.df2$residuals, main="Histogram of residuals",xlab="Residuals")
fit.df2 <- lm(mpg ~ year + displacement + weight, data = train.df)
summary(fit.df2)
rsq2 <- round(summary(fit.df2)$r.squared, 2)
adjustrsq2 <- round(summary(fit.df2)$adj.r.squared, 2)
rse2 <- round(sqrt(deviance(fit.df2)/df.residual(fit.df2)), 2)
rmse2 <- round(sqrt(mean(fit.df2$residuals^2)), 2)
print(paste('R-sq value is', rsq2))
print(paste('Adjusted R-sq value is', adjustrsq2))
print(paste('RSE is', rse2))
print(paste('RMSE is', rmse2))
summary(fit.df)
rsq <- round(summary(fit.df)$r.squared, 2)
adjustrsq <- round(summary(fit.df)$adj.r.squared, 2)
rse <- round(sqrt(deviance(fit.df)/df.residual(fit.df)), 2)
rmse <- round(sqrt(mean(fit.df$residuals^2)), 2)
print(paste('R-sq value is', rsq))
print(paste('Adjusted R-sq value is', adjustrsq))
print(paste('RSE is', rse))
print(paste('RMSE is', rmse))
summary(fit.df2)
rsq2 <- round(summary(fit.df2)$r.squared, 2)
adjustrsq2 <- round(summary(fit.df2)$adj.r.squared, 2)
rse2 <- round(sqrt(deviance(fit.df2)/df.residual(fit.df2)), 2)
rmse2 <- round(sqrt(mean(fit.df2$residuals^2)), 2)
print(paste('R-sq value is', rsq2))
print(paste('Adjusted R-sq value is', adjustrsq2))
print(paste('RSE is', rse2))
print(paste('RMSE is', rmse2))
predict(fit.df2)
predict(test.df)
predict(fit.df2, test.df)
predict.lm(fit.df2, test.df, interval = "confidence", level = "0.5")
predict.lm(fit.df2, test.df, interval = "confidence", level = 0.95)
df2.predict <- predict.lm(fit.df2, test.df, interval = "confidence", level = 0.95)
df2.predict
df2.predict <- predict.lm(fit.df2, test.df, interval = "confidence")
df2.predict
df2.predict <- predict.lm(fit.df2, test.df)
df2.predict
df2.predict <- predict.lm(fit.df2, test.df, interval = "confidence", level = 0.95)
df2.predict
test.df
df2.predict
df2.predict <- predict.lm(fit.df2, test.df, interval = "confidence", level = 0.95, se.fit = TRUE)
df2.predict
df2.predict
df2.predict
predict(fit.df2, test.df, interval = "confidence", level = 0.95, se.fit = TRUE)
df2.predict$lwr
df2.predict
df2.predict$df
df2.predict
df2.predict <- predict.lm(fit.df2, test.df, interval = "confidence", level = 0.95)
df2.predict
test.df
fit.df2$fitted.values
fit.df2.lm$fitted.values
fit.df2
train.df$value.lm <- fit.df2$fitted.values
train.df
test.df2$value.lm <- fit.df2$fitted.values
test.df2 <- fit.df2$fitted.values
test.df2
df2.predict
df2.predict$fitted.values
df2.predict <- predict.lm(fit.df2, test.df, interval = "confidence", level = 0.95)
class(df2.predict)
class(test.df)
df2.predict
df2.predict$fit
df2.predict
test.df
test.df$mpg
match.df <- test.df$mpg
match.df
match.df <- data.frame("Prediction" = test.df$mpg)
match.df
match.df <- predict.lm(fit.df2, test.df, interval = "confidence", level = 0.95)
match.df
match.df <- predict.lm(fit.df2, match.df, interval = "confidence", level = 0.95)
match.df <- data.frame(predict.lm(fit.df2, test.df, interval = "confidence", level = 0.95))
match.df
match.df <- rbind(match.df, data.frame(predict.lm(fit.df2, test.df, interval = "confidence", level = 0.95)))
match.df
match.df <- data.frame("Prediction" = test.df$mpg)
match.df
match.df <- rbind(match.df, data.frame(predict.lm(fit.df2, test.df, interval = "confidence", level = 0.95)))
match.df <- cbind(match.df, data.frame(predict.lm(fit.df2, test.df, interval = "confidence", level = 0.95)))
match.df
match.df <- cbind(match.df, data.frame("matches"))
match.df
match.df <- mutate(match.df, Matches = Prediction >= lwr && Prediction <= upr)
match.df <- mutate(match.df, Matches = log(fit))
match.df <- mutate(match.df, Matches = log(fit))
match.df <- cbind(match.df, data.frame("matches"))
match.df
match.df <- data.frame("Prediction" = test.df$mpg)
match.df
match.df <- cbind(match.df, data.frame(predict.lm(fit.df2, test.df, interval = "confidence", level = 0.95)))
match.df
match.df <- cbind(match.df, data.frame("matches"))
match.df
match.df["matches"]='0'
match.df
match.df <- data.frame("Prediction" = test.df$mpg)
match.df <- cbind(match.df, data.frame(predict.lm(fit.df2, test.df, interval = "confidence", level = 0.95)))
match.df["matches"]='0'
match.df
match.df <- data.frame("Prediction" = test.df$mpg)
match.df <- cbind(match.df, data.frame(predict.lm(fit.df2, test.df, interval = "confidence", level = 0.95)))
match.df["Matches"]='0'
match.df
apply(match.df, 1, function(x) print(x))
apply(match.df, 1, function(x) print(x.Prediction))
apply(match.df, 1, function(x) print(x$Prediction))
apply(match.df, 1, function(Prediction,fit,lwr,upr,Matches) print(Prediction))
apply(match.df, 1, function(Prediction,fit,lwr,upr,Matches) print(fit))
match.df
match.df$fit
apply(match.df, 1, function(Prediction,fit,lwr,upr,Matches) print(fit))
apply(match.df, 1, function(Prediction,fit,lwr,upr,Matches) print(lwr))
df2.predict <- predict.lm(fit.df2, test.df)
df2.predict
fit.df2$fitted.values
match.df
match.df$Prediction>=match.df$upr&match.df$Prediction<=match.df$lwr
match.df$Prediction<=match.df$upr&match.df$Prediction>=match.df$lwr
test111 <- match.df$Prediction<=match.df$upr&match.df$Prediction>=match.df$lwr
class(test111)
test111 <- data.frame(match.df$Prediction<=match.df$upr&match.df$Prediction>=match.df$lwr)
test111
match.df["Matches"]=test111
match.df
match.df[Matches] <- 1
match.df$Matches <- 1
match.df
match.df$Prediction<=match.df$upr&match.df$Prediction>=match.df$lwr
lapply(match.df$Prediction<=match.df$upr&match.df$Prediction>=match.df$lwr, as.numeric)
test111 <- data.frame(lapply(match.df$Prediction<=match.df$upr&match.df$Prediction>=match.df$lwr, as.numeric))
test111
match.df["Matches"]=test111
test111 <- 1
test111
test111 <- data.frame(if(match.df$Prediction<=match.df$upr&match.df$Prediction>=match.df$lwr) 1 else 0)
if(match.df$Prediction<=match.df$upr&match.df$Prediction>=match.df$lwr) 1 else 0
if(1=1) 1 else 0
if(1==1) 1 else 0
if(match.df$Prediction<=match.df$upr & match.df$Prediction>=match.df$lwr) 1 else 0
ifelse(1==1,1,2)
ifelse(match.df$Prediction<=match.df$upr & match.df$Prediction>=match.df$lwr,1,0)
match.df <- data.frame("Prediction" = test.df$mpg)
match.df <- cbind(match.df, data.frame(predict.lm(fit.df2, test.df, interval = "confidence", level = 0.95)))
matches <- data.frame(ifelse(match.df$Prediction<=match.df$upr & match.df$Prediction>=match.df$lwr,1,0))
match.df["Matches"]=matches
match.df
total.matches <- apply(match.df,2,sum(Matches))
colSums(match.df$Matches)
df2.predict <- predict.lm(fit.df2, test.df)
df2.predict
sum(match.df$Matches)
print(paste('Total observations correctly predicted'), total.matches)
total.matches <- sum(match.df$Matches)
print(paste('Total observations correctly predicted'), total.matches)
total.matches
print(paste('Total observations correctly predicted', total.matches))
abcd <- predict.lm(fit.df2, test.df, interval = "predict", level = 0.95)
abcd
df2.predict <- predict.lm(fit.df2, test.df)
confidence.df <- data.frame("Prediction" = test.df$mpg)
confidence.df <- cbind(confidence.df, data.frame(predict.lm(fit.df2, test.df, interval = "confidence", level = 0.95)))
matches <- data.frame(ifelse(confidence.df$Prediction<=confidence.df$upr & confidence.df$Prediction>=confidence.df$lwr,1,0))
confidence.df["Matches"]=matches
total.matches <- sum(confidence.df$Matches)
print(paste('Total observations correctly predicted', total.matches))
predict.df <- data.frame("Prediction" = test.df$mpg)
predict.lm(fit.df2, test.df, interval = "predict", level = 0.95)
predict.df <- cbind(predict.df, data.frame(predict.lm(fit.df2, test.df, interval = "predict", level = 0.95)))
matches <- data.frame(ifelse(predict.df$Prediction<=predict.df$upr & predict.df$Prediction>=predict.df$lwr,1,0))
predict.df["Matches"]=matches
predict.matches <- sum(predict.df$Matches)
print(paste('Total observations correctly predicted', predict.matches))
predict.df <- data.frame("Prediction" = test.df$mpg)
predict.df
predict.df <- cbind(predict.df, data.frame(predict.lm(fit.df2, test.df, interval = "predict", level = 0.95)))
predict.df
predict.df <- data.frame("Prediction" = test.df$mpg)
predict.df <- cbind(predict.df, data.frame(predict.lm(fit.df2, test.df, interval = "prediction", level = 0.95)))
matches <- data.frame(ifelse(predict.df$Prediction<=predict.df$upr & predict.df$Prediction>=predict.df$lwr,1,0))
predict.df["Matches"]=matches
predict.matches <- sum(predict.df$Matches)
predict.matches
color <- c('red','blue','yellow','pink','black')
df <- data.frame(c)
color <- c('red','blue','yellow','pink','black')
df <- data.frame(color)
lm(df)
lm(data = df)
df <- data.frame(color, row.names = c('color'))
lm(data = df)
color <- c('red','blue','yellow','pink','black')
df <- data.frame(color, row.names = c('color'))
lm(data = df)
df
summart(df)
summary(df)
View(df)
View(df)
color <- c('red','blue','yellow','pink','black')
df <- data.frame(color, row.names = c('color'))
lm(data = df)
color <- c('red','blue','yellow','pink','black')
df <- data.frame(color, row.names = c('color'))
lm(color ~,data = df)
colors <- c('red','blue','yellow','pink','black')
df <- data.frame(color, row.names = c('color'))
lm(color ~,data = df)
df <- data.frame(color, colnames('color'))
colors <- c('red','blue','yellow','pink','black')
df <- data.frame(color)
df
lm(color ~,data = df)
colors <- c('red','blue','yellow','pink','black')
age <- c('1','2','3','2','4',)
colors <- c('red','blue','yellow','pink','black')
age <- c('1','2','3','2','4')
df <- data.frame(color, age)
lm(color ~,data = df)
lm(colors ~,data = df)
lm(age ~ colors, data = df)
model <- lm(age ~ colors, data = df)
summary(model)
library(dplyr)
install.packages("dplyr")
library(dplyr)
df <- read.csv(student.csv, header = TRUE, sep = ';')
library(dplyr)
df <- read.csv('student.csv', header = TRUE, sep = ';')
source("~/Library/Mobile Documents/com~apple~CloudDocs/IIT/CS422/Notes/dplyr/dplyrExercise.R")
library(dplyr)
setwd()
library(dplyr)
setwd(./)
library(dplyr)
setwd(.)
getwd
getwd()
library(dplyr)
setwd('/Users/lee/Library/Mobile\ Documents/com~apple~CloudDocs/IIT/CS422/Notes/dplyr')
df <- read.csv('student.csv', header = TRUE, sep = ';')
df
head
head(df)
sum(df$grade == "0")
sum(df$grade == "B")
gpa.ge.2 <- df %>% filter(gpa > 2.00)
student <- select(filter(df, gpa>=3.5 & grade == "B"), c('name','id'))
library(ISLR)
set.seed(1122)
index <- sample(1:nrow(Auto), 0.95*dim(Auto)[1])
train.df <- Auto[index,]
test.df <- Auto[-index, ]
fit.df <- lm(mpg~ . - name, data = train.df)
RSS <- c(crossprod(fit.df$residuals))
RSS
MSE <- RSS / length(fit.df$residuals)
MSE
RMSE <- sqrt(MSE)
RMSE
sqrt(mean(fit.df$residuals^2))
rm(list=ls())
library(dplyr)
library(rpart)
library(rpart.plot)
df <- read.csv("loan.csv", header=T, sep=",")
df
model <- rpart(Defaulted ~ ., data = df,
control=rpart.control(minsplit=2, minbucket=1))
model
df
summary(model)
rpart.plot(model, extra=103, fallen.leaves = T, type=2,
main="RPART Decision Tree")
