sd(cars$speed)
# Now, let's look at the covariance matrix
cov(cars)
# How about we plot the covariances:
pairs.panels(cars) # This function is in library psych, which we loaded above.
read.csv('us-covid.csv')
read.csv('us-covid.csv', header = FALSE, sep = ',')
read.csv('us-covid.csv', header = FALSE, sep = ',', blank.lines.skip = TRUE)
read.csv('us-covid.csv', header = FALSE, sep = '\n', blank.lines.skip = TRUE)
read.csv('us-covid.csv', header = FALSE, sep = '\n', flush = TRUE)
read.csv('us-covid.csv', header = FALSE, sep = '\n', comment.char = "#")
read.csv('us-covid.csv', header = TRUE, sep = '\n', comment.char = "#")
df = read.csv('us-covid.csv', header = TRUE, sep = '\n', comment.char = "#")
df
df = data.frame(read.csv('us-covid.csv', header = TRUE, sep = '\n', comment.char = "#"))
df
install.packages(c("cluster", "MASS", "nlme", "rlang", "survival"))
install.packages(c("cluster", "MASS", "nlme", "rlang", "survival"))
install.packages(c("cluster", "MASS", "nlme", "rlang", "survival"))
install.packages(c("cluster", "MASS", "nlme", "rlang", "survival"))
install.packages(c("cluster", "MASS", "nlme", "rlang", "survival"))
install.packages(c("cluster", "MASS", "nlme", "rlang", "survival"))
install.packages(c("cluster", "MASS", "nlme", "rlang", "survival"))
install.packages(c("cluster", "MASS", "nlme", "rlang", "survival"))
install.packages(c("cluster", "MASS", "nlme", "rlang", "survival"))
install.packages(c("cluster", "MASS", "nlme", "rlang", "survival"))
install.packages(c("cluster", "MASS", "nlme", "rlang", "survival"))
install.packages(c("cluster", "MASS", "nlme", "rlang", "survival"))
install.packages(c("cluster", "MASS", "nlme", "rlang", "survival"))
install.packages(c("cluster", "MASS", "nlme", "rlang", "survival"))
install.packages(c("cluster", "MASS", "nlme", "rlang", "survival"))
install.packages(c("cluster", "MASS", "nlme", "rlang", "survival"))
install.packages("dplyr")
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = '\n', comment.char = "#"))
select(df, -contains("_"))
library(dplyr)
select(df, -contains("_"))
df
select(df, -contains("N/A"))
df
df <- select(df, -contains("N/A"))
df
df <- select(df, starts_with("A"))
df
df
---
title: "CS 422 HW1"
---
title: "CS 422 HW1"
---
title: "CS 422 HW1"
---
title: "CS 422 HW1"
library(dplyr)
df <- select(df, starts_with("A"))
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = '\n', comment.char = "#"))
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = '\n', comment.char = "#"))
# Read the dataset into a R dataframe; call the dataframe ‘data.df’. Pay attention to the first seven lines of the dataset. These contain comments as indicated by the ‘#’ character in dataset file. When reading the dataset, ignore the lines that contain comments. (See the manual page for read.csv() and find out the parameter that will allow you to ignore comments.)
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = '\n', comment.char = "#"))
# You will notice that the last column of the dataset has many “N/A” values (Not Applicable). Drop this column so that the data.df dataframe now contains only eight columns, or attributes. The remaining analysis will be done on the dataframe with eight columns.
df <- select(df, starts_with("A"))
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = '\n', comment.char = "#"))
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = '\n', comment.char = "#"))
cf
df
library(dplyr)
select(df, -contains("N/A"))
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = '\n', quote = ",",comment.char = "#"))
df
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',', quote = "\n",comment.char = "#"))
df
select(df, -contains("N/A"))
df
select(df, where(~!any(is.na(.))))
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',', quote = "\n",comment.char = "#"))
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
df
select(df, where(~!any(is.na(.))))
df %>% select(where(~!any(is.na(.))))
(df <- data.frame(x = letters[1:5], y = NA, z = c(1:4, NA)))
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#", na.strings=c("")))
df
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#", na.strings=c("N/A")))
df
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#", na.strings=c("N//A")))
df
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#", na.strings = "NA"))
df
df[df == "N/A"] <- NA
df
df %>% select(where(~!any(is.na(.))))
arrange(desc(total_cases))
arrange(total_cases)
df %>% arrange(desc(total_cases))
print(top_n(df, 6))
df %>% arrange(desc(total_cases))
df
df <- arrange(desc(total_cases))
df <- df %>% arrange(desc(total_cases))
df
print(top_n(df, 6))
df <- df %>% arrange(desc(total_cases))
print(top_n(df, 6))
df
df <- df %>% select(where(~!any(is.na(.))))
df
df <- df %>% arrange(desc(total_cases))
print(top_n(df, 6))
print(top_n(df, -6))
df
install.packages("psych")
panel.smooth(total_cases, confirmed, col = par("col"), bg = NA, pch = par("pch"), cex = 1, col.smooth = 2, span = 2/3, iter = 3)
df %>% panel.smooth(total_cases, confirmed, col = par("col"), bg = NA, pch = par("pch"), cex = 1, col.smooth = 2, span = 2/3, iter = 3)
pairs(swiss, panel = panel.smooth, pch = ".")
pairs(df, panel = panel.smooth, pch = ".")
df %>% select(-c(1,2))
pairs(df %>% select(-c(1,2)), panel = panel.smooth, pch = ".")
cor(df %>% select(-c(1,2)))
install.packages("reshape2")
subset(melt(df %>% select(-c(1,2))),value>.30)
library(reshape2)
subset(melt(df %>% select(-c(1,2))),value>.30)
df
subset(melt(cor(df %>% select(-c(1,2)))),value>.30)
subset(melt(cor(df %>% select(-c(1,2)))),value>.90)
subset(melt(cor(df %>% select(-c(1,2)))),value>.90, value<1.0)
subset(melt(cor(df %>% select(-c(1,2)))),value>.90)
subset(melt(cor(df %>% select(-c(1,2)))),value>.95)
pairs(df %>% select(-c(1,2)), panel = panel.smooth(), pch = ".")
pairs(df %>% select(-c(1,2)), panel = panel.smooth, pch = ".")
df
subset(melt(cor(df %>% select(-c(1,2)))),value>.95)
subset(melt(cor(df %>% select(-c(1,2)))),value<.95)
subset(melt(cor(df %>% select(-c(1,2)))),value<.3)
df
df$confirmed+df$probable
plot(df$confirmed+df$probable, df$total_cases)
df2 <- data.frame(df$confirmed+df$probable, df$total_cases)
df2
plot(df2)
plot(df2)
df2 <- data.frame(df$confirmed+df$probable, df$total_deaths)
plot(df$confirmed+df$probable, df$total_deaths)
plot(df$confirmed/100+df$probable/100, df$total_deaths)
plot((df$confirmed+df$probable)/df$total_deaths)
plot(df$confirmed+df$probable, df$total_deaths,type='o',lty=3,col='pink',lwd=4,main="This is a graph",col.main='blue',xlab="Time",ylab="Performance")
plot(df$confirmed+df$probable, df$total_deaths,type='o',lty=3,col='pink',lwd=4 ,col.main='blue', xlab="confirmed+probable cases", ylab="total deaths")
plot(df$confirmed+df$probable, df$total_deaths,type='p',lty=3,col='pink',lwd=4 ,col.main='blue', xlab="confirmed+probable cases", ylab="total deaths")
plot(df$confirmed+df$probable, df$total_deaths,type='p',lty=3,lwd=4 ,col.main='blue', xlab="confirmed+probable cases", ylab="total deaths")
boxplot(f$confirmed+df$probable, df$total_deaths)
boxplot(df$confirmed+df$probable, df$total_deaths)
boxplot(df$confirmed+df$probable, df$total_deaths, col = "white",cex=0.5, pch=20,outcol=colors[6], main = "Example",ylab="Value",names =c("Feature1","Feature2"))
boxplot(df$confirmed+df$probable, df$total_deaths, col = "white",cex=0.5, pch=20,outcol=colors[6], main = "Example",ylab="Value",names =c("Feature1","Feature2"))
boxplot(df$confirmed+df$probable, df$total_deaths, col = "white",cex=0.5, pch=20,outcol=colors[6], main = "Example",ylab="Value")
boxplot(df$confirmed+df$probable, df$total_deaths, col = "white",cex=0.5, pch=20,outcol=colors[6], main = "Example")
plot(df$confirmed+df$probable, df$total_deaths,type='p',lty=3,lwd=4 ,col.main='blue', xlab="confirmed+probable cases", ylab="total deaths")
plot(df$confirmed+df$probable, df$total_deaths,type='p',lty=3,lwd=4 ,col.main='blue', xlab="confirmed+probable cases", ylab="total deaths")
boxplot(df$confirmed+df$probable, df$total_deaths, col = "white",cex=0.5, pch=20,outcol=colors[6], main = "Example")
boxplot(df$confirmed+df$probable)
boxplot(df$confirmed+df$probable)
install.packages("ggplot2")
ggplot(df, aes(x=confirmed+probable, y=total_deaths, color=views)) + geom_line()
library(ggplot2)
ggplot(df, aes(x=confirmed+probable, y=total_deaths, color=views)) + geom_line()
ggplot(df, aes(x=confirmed+probable, y=total_deaths, color=total_deaths)) + geom_line()
plot(df$confirmed+df$probable, df$total_deaths,type='p',lty=3,lwd=4 ,col.main='blue', xlab="confirmed+probable cases", ylab="total deaths")
df2 <- data.frame(df$confirmed+df$probable, df$total_deaths)
df2
a<-which(x %in% boxplot.stats(df$confirmed+df$probable)$out)
a<-which(df$confirmed+df$probable %in% boxplot.stats(df$confirmed+df$probable)$out)
df2.columns = ['x', 'y']
df2
df2.column
df2.columnname
df2.name
df2$df.confirmed...df.probable
df2$df.total_deaths
df2.rename(columns={"df.confirmed...df.probable": "x", "df.total_deaths": "y"})
colnames(df2)=c('x','y')
a<-which(x %in% boxplot.stats(x)$out)
df2 <- data.frame(df$confirmed+df$probable, df$total_deaths)
colnames(df2)=c('x','y')
a<-which(x %in% boxplot.stats(x)$out)
which(x %in% boxplot.stats(x)$out)
which(xx %in% boxplot.stats(x)$out)
which(confirmed %in% boxplot.stats(x)$out)
which(df$total_deaths %in% boxplot.stats(x)$out)
which(df$total_deaths %in% boxplot.stats(df$total_deaths)$out)
summary(df2)
a<-which(x %in% boxplot.stats(x)$out)
df2$x
df2$y
a<-which(df2$x %in% boxplot.stats(df2$x)$out)
a
df2 <- data.frame(df$confirmed+df$probable, df$total_deaths)
colnames(df2)=c('x','y')
summary(df2)
a<-which(df2$x %in% boxplot.stats(df2$y)$out)
b<-which(df2$y %in% boxplot.stats(df2$y)$out)
intersect(a,b)
plot(df) #绘制x, y的散点图
p2<-union(a,b)
points(df[p2,],col="red",pch="x",cex=2) #标记异常值
points(df[p2,],col="red",pch="x",cex=2) #标记异常值
plot(df) #绘制x, y的散点图
p2<-union(a,b)
points(df[p2,],col="red",pch="x",cex=2) #标记异常值
intersect(a,b)
plot(df) #绘制x, y的散点图
plot(df2) #绘制x, y的散点图
p2<-union(a,b)
points(df2[p2,],col="red",pch="x",cex=2) #标记异常值
intersect(a,b)
plot(df2) #绘制x, y的散点图
p2<-union(a,b)
points(df2[p2,],col="red",pch="x",cex=2) #标记异常值
df2[p2,]
df2 <- df2[p2,]
df2
df3 <- left_join(df,df2, by = c("total_deaths" = "y"))
df3 <- right_join(df,df2, by = c("total_deaths" = "y"))
df3
print(df3)
df3
df3 <- subset(df3, select = -c(x) )
df3
# Read the dataset into a R dataframe; call the dataframe ‘data.df’. Pay attention to the first seven lines of the dataset. These contain comments as indicated by the ‘#’ character in dataset file. When reading the dataset, ignore the lines that contain comments. (See the manual page for read.csv() and find out the parameter that will allow you to ignore comments.)
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
# You will notice that the last column of the dataset has many “N/A” values (Not Applicable). Drop this column so that the data.df dataframe now contains only eight columns, or attributes. The remaining analysis will be done on the dataframe with eight columns.
df <- df %>% select(where(~!any(is.na(.))))
library(dplyr)
library(psych)
library(magrittr)
df <- df %>% select(where(~!any(is.na(.))))
View(df)
View(df)
View(df)
# You will notice that the last column of the dataset has many “N/A” values (Not Applicable). Drop this column so that the data.df dataframe now contains only eight columns, or attributes. The remaining analysis will be done on the dataframe with eight columns.
df <- df %>% select(where(~!any(is.na(.))))
# You will notice that the last column of the dataset has many “N/A” values (Not Applicable). Drop this column so that the data.df dataframe now contains only eight columns, or attributes. The remaining analysis will be done on the dataframe with eight columns.
df <- df %>% select(where(~!any(is.na(.))))
# You will notice that the last column of the dataset has many “N/A” values (Not Applicable). Drop this column so that the data.df dataframe now contains only eight columns, or attributes. The remaining analysis will be done on the dataframe with eight columns.
df <- df %>% select(where(~!any(is.na(.))))
# You will notice that the last column of the dataset has many “N/A” values (Not Applicable). Drop this column so that the data.df dataframe now contains only eight columns, or attributes. The remaining analysis will be done on the dataframe with eight columns.
df <- df %>% select(where(~!any(is.na(.))))
# Sort the dataframe:
## (a) Sort the dataframe by descending order of total cases, then print the top six entries.
df <- df %>% arrange(desc(total_cases))
print(top_n(df, 6))
## (b) Sort the dataframe by descending order of total cases, then print the bottom six entries.
print(top_n(df, -6))
View(df)
library(dplyr)
library(psych)
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
df
df <- df %>% select(where(~!any(is.na(.))))
df <- df %>% arrange(desc(total_cases))
print(top_n(df, 6))
print(top_n(df, -6))
pairs(df %>% select(-c(1,2)), panel = panel.smooth, pch = ".")
plot(df$confirmed+df$probable, df$total_deaths,type='p',lty=3,lwd=4 ,col.main='blue', xlab="confirmed+probable cases", ylab="total deaths")
df2 <- data.frame(df$confirmed+df$probable, df$total_deaths)
colnames(df2)=c('x','y')
a<-which(df2$x %in% boxplot.stats(df2$y)$out)
b<-which(df2$y %in% boxplot.stats(df2$y)$out)
intersect(a,b)
p2<-union(a,b)
df2 <- df2[p2,]
df3 <- right_join(df,df2, by = c("total_deaths" = "y"))
df3 <- subset(df3, select = -c(x))
df3
unlink("Library/Mobile Documents/com~apple~CloudDocs/IIT/CS422/homeworks/Homework 1/pan-li-hw1_cache", recursive = TRUE)
library(dplyr)
library(psych)
library(magrittr)
library(knitr)
unlink("Library/Mobile Documents/com~apple~CloudDocs/IIT/CS422/homeworks/Homework 1/pan-li-hw1_cache", recursive = TRUE)
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
### Question ii
```{r}
```{r}
df <- df %>% select(where(~!any(is.na(.))))
library(dplyr)
library(psych)
library(magrittr)
library(knitr)
df <- df %>% select(where(~!any(is.na(.))))
# You will notice that the last column of the dataset has many “N/A” values (Not Applicable). Drop this column so that the data.df dataframe now contains only eight columns, or attributes. The remaining analysis will be done on the dataframe with eight columns.
df <- df %>% select(where(~!any(is.na(.))))
# You will notice that the last column of the dataset has many “N/A” values (Not Applicable). Drop this column so that the data.df dataframe now contains only eight columns, or attributes. The remaining analysis will be done on the dataframe with eight columns.
df <- df %>% select(where(~!any(is.na(.))))
# Read the dataset into a R dataframe; call the dataframe ‘data.df’. Pay attention to the first seven lines of the dataset. These contain comments as indicated by the ‘#’ character in dataset file. When reading the dataset, ignore the lines that contain comments. (See the manual page for read.csv() and find out the parameter that will allow you to ignore comments.)
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
# Read the dataset into a R dataframe; call the dataframe ‘data.df’. Pay attention to the first seven lines of the dataset. These contain comments as indicated by the ‘#’ character in dataset file. When reading the dataset, ignore the lines that contain comments. (See the manual page for read.csv() and find out the parameter that will allow you to ignore comments.)
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
# Sort the dataframe:
## (a) Sort the dataframe by descending order of total cases, then print the top six entries.
df <- df %>% arrange(desc(total_cases))
print(top_n(df, 6))
## (b) Sort the dataframe by descending order of total cases, then print the bottom six entries.
print(top_n(df, -6))
### You will notice that the last column of the dataset has many “N/A” values (Not Applicable). Drop this column so that the data.df dataframe now contains only eight columns, or attributes. The remaining analysis will be done on the dataframe with eight columns.
df <- df %>% select(where(~!any(is.na(.))))
### You will notice that the last column of the dataset has many “N/A” values (Not Applicable). Drop this column so that the data.df dataframe now contains only eight columns, or attributes. The remaining analysis will be done on the dataframe with eight columns.
df <- df %>% select(where(~!any(is.na(.))))
### You will notice that the last column of the dataset has many “N/A” values (Not Applicable). Drop this column so that the data.df dataframe now contains only eight columns, or attributes. The remaining analysis will be done on the dataframe with eight columns.
df <- df %>% select(where(~!any(is.na(.))))
### You will notice that the last column of the dataset has many “N/A” values (Not Applicable). Drop this column so that the data.df dataframe now contains only eight columns, or attributes. The remaining analysis will be done on the dataframe with eight columns.
df <- df %>% select(where(~!any(is.na(.))))
# Read the dataset into a R dataframe; call the dataframe ‘data.df’. Pay attention to the first seven lines of the dataset. These contain comments as indicated by the ‘#’ character in dataset file. When reading the dataset, ignore the lines that contain comments. (See the manual page for read.csv() and find out the parameter that will allow you to ignore comments.)
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
# Sort the dataframe:
## (a) Sort the dataframe by descending order of total cases, then print the top six entries.
df <- df %>% arrange(desc(total_cases))
print(top_n(df, 6))
## (b) Sort the dataframe by descending order of total cases, then print the bottom six entries.
print(top_n(df, -6))
# Sort the dataframe:
## (a) Sort the dataframe by descending order of total cases, then print the top six entries.
df <- df %>% arrange(desc(total_cases))
print(top_n(df, 6))
## (b) Sort the dataframe by descending order of total cases, then print the bottom six entries.
print(top_n(df, -6))
# Read the dataset into a R dataframe; call the dataframe ‘data.df’. Pay attention to the first seven lines of the dataset. These contain comments as indicated by the ‘#’ character in dataset file. When reading the dataset, ignore the lines that contain comments. (See the manual page for read.csv() and find out the parameter that will allow you to ignore comments.)
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
# Read the dataset into a R dataframe; call the dataframe ‘data.df’. Pay attention to the first seven lines of the dataset. These contain comments as indicated by the ‘#’ character in dataset file. When reading the dataset, ignore the lines that contain comments. (See the manual page for read.csv() and find out the parameter that will allow you to ignore comments.)
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
detach("package:dplyr", unload = TRUE)
remove.packages("dplyr")
install.packages("dplyr")
df <- df %>% select(where(~!any(is.na(.))))
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
gc()
df <- data.frame(read.csv('us-covid.csv', header = TRUE, sep = ',',comment.char = "#"))
# due to the original csv file contains the String value "N/A"
df[df == "N/A"] <- NA
df <- df %>% select(where(~!any(is.na(.))))
library(dplyr)
df <- df %>% select(where(~!any(is.na(.))))
q <- c("Hockey", "Football", "Baseball", "Curling", "Rugby", + "Lacrosse", "Basketball", "Tennis", "Cricket", "Soccer")
q <- c("Hockey", "Football", "Baseball", "Curling", "Rugby", "Lacrosse", "Basketball", "Tennis", "Cricket", "Soccer")
q
q2 <-c(q, "Hockey", "Lacrosse", "Hockey", "Water Polo", + "Hockey", "Lacrosse")
q <- c("Hockey", "Football", "Baseball", "Curling", "Rugby", "Lacrosse", "Basketball", "Tennis", "Cricket", "Soccer")
q
q2 <-c(q, "Hockey", "Lacrosse", "Hockey", "Water Polo", "Hockey", "Lacrosse")
q2
q2Factor <-as.factor(q2)
q2Factor
as.numeric(q2Factor)
as.numeric(q)
q2Factor
install.packages("rpart")
install.packages("rpart.plot")
print(iris)
index <- sample(1:nrow(iris), 0.95*dim(iris)[1])
train.df <- iris[index,]
test.df <- iris[-index, ]
library(rpart)
library(rpart.plot)
index <- sample(1:nrow(iris), 0.95*dim(iris)[1])
train.df <- iris[index,]
test.df <- iris[-index, ]
model <- rpart(class ~ *, data = train.df)
index <- sample(1:nrow(iris), 0.95*dim(iris)[1])
train.df <- iris[index,]
test.df <- iris[-index, ]
model <- rpart(class ~ ., data = train.df)
model <- rpart(Species ~ ., data = train.df)
rpart.plot(model, extra=104, fallen.leaves=T, type=4, main="Iris Dataset Decision Tree")
plotcp(model)
printcp(model)
# CS422 Data Mining
# Vijay K. Gurbani, Ph.D.
# Illinois Institute of Technology
# Make sure you install these packages once by issuing the command:
# > install.packages(c("rpart", "rpart.plot", "caret", "e1071", "knitr"))
library(rpart)
library(caret)
library(rpart.plot)
setwd("/Downloads")
---
title: "CS 422 HW3"
# CS422 Data Mining
# Vijay K. Gurbani, Ph.D.
# Illinois Institute of Technology
# Make sure you install these packages once by issuing the command:
# > install.packages(c("rpart", "rpart.plot", "caret", "e1071", "knitr"))
library(rpart)
library(caret)
library(rpart.plot)
setwd("/Users/lee/Library/Mobile\ Documents/com~apple~CloudDocs/IIT/CS422/Notes/dplyr")
# Example of tree pruning using the ecoli dataset (see
# https://archive.ics.uci.edu/ml/datasets/ecoli)
# Read data and create a classification tree using all predictors.
ecoli <- read.csv("ecoli.csv")
model <- rpart(class ~ mcg + gvh + lip + chg + aac + alm1 + alm2, data=ecoli)
rpart.plot(model, extra=104, fallen.leaves = T, type=4)  # Show the tree
# Can we prune?
plotcp(model)
printcp(model)
# Now look at plotcp() and choose a cp value of 0.04, corresponding with a
# tree size of 5
model.pruned <- prune(model, cp=0.01)
rpart.plot(model.pruned, extra=104, fallen.leaves = T, type=4) # Should be a
# simpler tree.
library(dplyr)
library(rpart)
library(rpart.plot)
setwd('/Users/lee/Library/Mobile\ Documents/com~apple~CloudDocs/IIT/CS422/Notes/dplyr')
df <- read.csv('student.csv', header = TRUE, sep = ';')
df
sum(df$grade == "B")
# filter
gpa.ge.2 <- df %>% filter(gpa > 2.00)
# select
student <- select(filter(df, gpa>=3.5 & grade == "B"), c('name','id'))
# loan
rm(list=ls())
df <- read.csv("loan.csv", header=T, sep=",")
model <- rpart(Defaulted ~ ., data = df,
control=rpart.control(minsplit=2, minbucket=1))
rpart.plot(model, extra=103, fallen.leaves = T, type=2,
main="RPART Decision Tree")
# Let's see how it predicts.
obs <- data.frame(Homeowner="Yes", Marital.Status="Single",
Annual.Income=200)
test.df <- obs
obs <- data.frame(Homeowner="No", Marital.Status="Divorced",
Annual.Income=160)
test.df <- rbind(test.df, obs)
obs <- data.frame(Homeowner="No", Marital.Status="Married",
Annual.Income=73)
test.df <- rbind(test.df, obs)
# Predict the class and the probability associated with each prediction
pred.class <- predict(model, newdata=test.df, type = "class")
pred.prob <- predict(model, newdata=test.df, type = "prob")
library(rpart)
library(rpart.plot)
rm(list=ls())
setwd("/Users/lee/Library/Mobile\ Documents/com~apple~CloudDocs/IIT/CS422/Notes/dplyr")
df <- read.csv("loan.csv", header=T, sep=",")
model <- rpart(Defaulted ~ ., data = df,
control=rpart.control(minsplit=2, minbucket=1))
rpart.plot(model, extra=103, fallen.leaves = T, type=2,
main="RPART Decision Tree")
# Let's see how it predicts.
obs <- data.frame(Homeowner="Yes", Marital.Status="Single",
Annual.Income=200)
test.df <- obs
obs <- data.frame(Homeowner="No", Marital.Status="Divorced",
Annual.Income=160)
test.df <- rbind(test.df, obs)
obs <- data.frame(Homeowner="No", Marital.Status="Married",
Annual.Income=73)
test.df <- rbind(test.df, obs)
# Predict the class and the probability associated with each prediction
pred.class <- predict(model, newdata=test.df, type = "class")
pred.prob <- predict(model, newdata=test.df, type = "prob")
rpart.plot(model, extra=104, fallen.leaves=T, type=4, main="Iris Dataset Decision Tree")
index <- sample(1:nrow(iris), 0.95*dim(iris)[1])
train.df <- iris[index,]
test.df <- iris[-index, ]
model <- rpart(Species ~ ., data = train.df)
rpart.plot(model, extra=104, fallen.leaves=T, type=4, main="Iris Dataset Decision Tree")
print(test.df)
